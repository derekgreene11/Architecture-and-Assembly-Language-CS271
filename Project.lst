Microsoft (R) Macro Assembler Version 14.39.33523.0	    04/26/24 11:25:23
;A More Advanced Arithmetic Program     (Proj3_greenede.asm  Page 1 - 1


				TITLE A More Advanced Arithmetic Program     (Proj3_greenede.asm)

				; Author: Derek Greene
				; Last Modified: 4/24/2024
				; OSU email address: greenede@oregonstate.edu
				; Course number/section:   CS271 Section [400]
				; Project Number: 3                Due Date: 5/5/24
				; Description: Program displays title and programmers name, followed by getting the user name and greeting
				;              the user. The program then will prompt the user repeatedly to input a number.
				;              Program validates user input in range [-200,-100] OR [-50,-1] (inclusive).
				;              Program will alert user of any out of range negative numbers.
				;              Program will store the number of valid inputs entered and calculate the valid input values.
				;              Program will number each line of user input and increment the line number for valid input only.
				;              Program will then calculate the rounded integer average of the valid inputs and store in a variable.
				;              Program will display the number of valid inputs, the sum, max, min, rounded average, decimal-point-number, and a goodbye message.

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				; constant definitions for range [-200,-100] & [-50,-1]
 =-000000C8			LOWER_LIMIT_1 = -200
 =-00000032			LOWER_LIMIT_2 = -50
 =-00000064			UPPER_LIMIT_1 = -100
 =-00000001			UPPER_LIMIT_2 = -1

 00000000			.data

 00000000 41 20 4D 6F 72	programTitle        BYTE    "A More Advanced Arithmetic Program     by Derek Greene",0
	   65 20 41 64 76
	   61 6E 63 65 64
	   20 41 72 69 74
	   68 6D 65 74 69
	   63 20 50 72 6F
	   67 72 61 6D 20
	   20 20 20 20 62
	   79 20 44 65 72
	   65 6B 20 47 72
	   65 65 6E 65 00
 00000037 2A 2A 45 43 3A	extraCredit1        BYTE    "**EC: Program numbers each line of input, incrementing the line number for each valid input.",0
	   20 50 72 6F 67
	   72 61 6D 20 6E
	   75 6D 62 65 72
	   73 20 65 61 63
	   68 20 6C 69 6E
	   65 20 6F 66 20
	   69 6E 70 75 74
	   2C 20 69 6E 63
	   72 65 6D 65 6E
	   74 69 6E 67 20
	   74 68 65 20 6C
	   69 6E 65 20 6E
	   75 6D 62 65 72
	   20 66 6F 72 20
	   65 61 63 68 20
	   76 61 6C 69 64
	   20 69 6E 70 75
	   74 2E 00
 00000094 2A 2A 45 43 3A	extraCredit2        BYTE    "**EC: Program calculates the average as a decimal-point-number, rounded to nearest 0.01.",0
	   20 50 72 6F 67
	   72 61 6D 20 63
	   61 6C 63 75 6C
	   61 74 65 73 20
	   74 68 65 20 61
	   76 65 72 61 67
	   65 20 61 73 20
	   61 20 64 65 63
	   69 6D 61 6C 2D
	   70 6F 69 6E 74
	   2D 6E 75 6D 62
	   65 72 2C 20 72
	   6F 75 6E 64 65
	   64 20 74 6F 20
	   6E 65 61 72 65
	   73 74 20 30 2E
	   30 31 2E 00
 000000ED 54 68 69 73 20	instruct1           BYTE    "This program allows for the input of negative numbers within the specified range.",0
	   70 72 6F 67 72
	   61 6D 20 61 6C
	   6C 6F 77 73 20
	   66 6F 72 20 74
	   68 65 20 69 6E
	   70 75 74 20 6F
	   66 20 6E 65 67
	   61 74 69 76 65
	   20 6E 75 6D 62
	   65 72 73 20 77
	   69 74 68 69 6E
	   20 74 68 65 20
	   73 70 65 63 69
	   66 69 65 64 20
	   72 61 6E 67 65
	   2E 00
 0000013F 54 68 65 20 6D	instruct2           BYTE    "The min, max, average, sum, number of inputs, & decimal-number are then calculated and displayed.",0
	   69 6E 2C 20 6D
	   61 78 2C 20 61
	   76 65 72 61 67
	   65 2C 20 73 75
	   6D 2C 20 6E 75
	   6D 62 65 72 20
	   6F 66 20 69 6E
	   70 75 74 73 2C
	   20 26 20 64 65
	   63 69 6D 61 6C
	   2D 6E 75 6D 62
	   65 72 20 61 72
	   65 20 74 68 65
	   6E 20 63 61 6C
	   63 75 6C 61 74
	   65 64 20 61 6E
	   64 20 64 69 73
	   70 6C 61 79 65
	   64 2E 00
 000001A1 50 6C 65 61 73	getUserName         BYTE    "Please enter your name: ",0
	   65 20 65 6E 74
	   65 72 20 79 6F
	   75 72 20 6E 61
	   6D 65 3A 20 00
 000001BA 48 65 6C 6C 6F	greetUser           BYTE    "Hello, ",0
	   2C 20 00
 000001C2 21 20 00		explPnt             BYTE    "! ",0
 000001C5 3A 20 00		colon               BYTE    ": ",0
 000001C8 2E 00			decimal             BYTE    ".",0
 000001CA 50 6C 65 61 73	userInputMsg1       BYTE    "Please enter integers in the range [-200,-100] or [-50,-1]",0
	   65 20 65 6E 74
	   65 72 20 69 6E
	   74 65 67 65 72
	   73 20 69 6E 20
	   74 68 65 20 72
	   61 6E 67 65 20
	   5B 2D 32 30 30
	   2C 2D 31 30 30
	   5D 20 6F 72 20
	   5B 2D 35 30 2C
	   2D 31 5D 00
 00000205 57 68 65 6E 20	userInputMsg2       BYTE    "When you're done, enter a non-negative number to calculate results.",0
	   79 6F 75 27 72
	   65 20 64 6F 6E
	   65 2C 20 65 6E
	   74 65 72 20 61
	   20 6E 6F 6E 2D
	   6E 65 67 61 74
	   69 76 65 20 6E
	   75 6D 62 65 72
	   20 74 6F 20 63
	   61 6C 63 75 6C
	   61 74 65 20 72
	   65 73 75 6C 74
	   73 2E 00
 00000249 49 6E 70 75 74	userInput           BYTE    "Input ",0
	   20 00
 00000250 49 4E 56 41 4C	invalidNeg          BYTE    "INVALID: number is not in range [-200,-100] or [-50,-1].",0
	   49 44 3A 20 6E
	   75 6D 62 65 72
	   20 69 73 20 6E
	   6F 74 20 69 6E
	   20 72 61 6E 67
	   65 20 5B 2D 32
	   30 30 2C 2D 31
	   30 30 5D 20 6F
	   72 20 5B 2D 35
	   30 2C 2D 31 5D
	   2E 00
 00000289 45 52 52 4F 52	noValidNums         BYTE    "ERROR: no valid integers entered!",0
	   3A 20 6E 6F 20
	   76 61 6C 69 64
	   20 69 6E 74 65
	   67 65 72 73 20
	   65 6E 74 65 72
	   65 64 21 00
 000002AB 59 6F 75 20 65	resultMsg1          BYTE    "You entered ",0
	   6E 74 65 72 65
	   64 20 00
 000002B8 20 76 61 6C 69	resultMsg2          BYTE    " valid numbers",0
	   64 20 6E 75 6D
	   62 65 72 73 00
 000002C7 53 75 6D 3A 20	resultSum           BYTE    "Sum: ",0
	   00
 000002CD 4D 61 78 69 6D	resultMax           BYTE    "Maximum: ",0
	   75 6D 3A 20 00
 000002D7 4D 69 6E 69 6D	resultMin           BYTE    "Minimum: ",0
	   75 6D 3A 20 00
 000002E1 52 6F 75 6E 64	resultAvg           BYTE    "Rounded Average: ",0
	   65 64 20 41 76
	   65 72 61 67 65
	   3A 20 00
 000002F3 44 65 63 69 6D	resultDec           BYTE    "Decimal-Number: ",0
	   61 6C 2D 4E 75
	   6D 62 65 72 3A
	   20 00
 00000304 54 68 61 6E 6B	goodbyeMsg          BYTE    "Thanks for using A more Advanced Arithemetic Program! Goodbye, ",0
	   73 20 66 6F 72
	   20 75 73 69 6E
	   67 20 41 20 6D
	   6F 72 65 20 41
	   64 76 61 6E 63
	   65 64 20 41 72
	   69 74 68 65 6D
	   65 74 69 63 20
	   50 72 6F 67 72
	   61 6D 21 20 47
	   6F 6F 64 62 79
	   65 2C 20 00
 00000344 00000000		userNameBytes       DWORD   ?         ; holds number of characters in username
 00000348  00000014 [		userName            BYTE    20 DUP(0) 
	    00
	   ]
 0000035C 00000000		inputNum            SDWORD  ?
 00000360 FFFFFF38		max                 SDWORD  -200      
 00000364 00000000		min                 SDWORD  ?
 00000368 00000000		sum                 SDWORD  ?
 0000036C 00000000		avg                 SDWORD  ?
 00000370 00000000		avg2                SDWORD  ?
 00000374 00000000		count               DWORD   0
 00000378 00000000		rmd                 DWORD   ?
 0000037C 00000000		intPart             DWORD   ?
 00000380 00000000		oneHundred          DWORD   ?
 00000384 00000000		decimalPart         DWORD   ?

 00000000			.code
 00000000			main PROC
				
				; ----------------------------------------------------------
				; Displays program title, instructions, and username prompt.
				; Username input is stored in userName.  
				; Displays hello message with username
				; -----------------------------------------------------------
 00000000  BA 00000000 R	    mov     EDX, OFFSET programTitle
 00000005  E8 00000000 E	    call    WriteString
 0000000A  E8 00000000 E	    call    CrLf
 0000000F  BA 00000037 R	    mov     EDX, OFFSET extraCredit1
 00000014  E8 00000000 E	    call    WriteString
 00000019  E8 00000000 E	    call    CrLf
 0000001E  BA 00000094 R	    mov     EDX, OFFSET extraCredit2
 00000023  E8 00000000 E	    call    WriteString
 00000028  E8 00000000 E	    call    CrLf
 0000002D  BA 000000ED R	    mov     EDX, OFFSET instruct1
 00000032  E8 00000000 E	    call    WriteString
 00000037  E8 00000000 E	    call    CrLf
 0000003C  BA 0000013F R	    mov     EDX, OFFSET instruct2
 00000041  E8 00000000 E	    call    WriteString
 00000046  E8 00000000 E	    call    CrLf
 0000004B  E8 00000000 E	    call    CrLf
 00000050  BA 000001A1 R	    mov     EDX, OFFSET getUserName
 00000055  E8 00000000 E	    call    WriteString
 0000005A  BA 00000348 R	    mov     EDX, OFFSET userName
 0000005F  B9 00000014		    mov     ECX, SIZEOF userName
 00000064  E8 00000000 E	    call    ReadString
 00000069  A3 00000344 R	    mov     userNameBytes, EAX
 0000006E  E8 00000000 E	    call    CrLf
 00000073  BA 000001BA R	    mov     EDX, OFFSET greetUser
 00000078  E8 00000000 E	    call    WriteString
 0000007D  BA 00000348 R	    mov     EDX, OFFSET userName
 00000082  E8 00000000 E	    call    WriteString
 00000087  BA 000001C2 R	    mov     EDX, OFFSET explPnt
 0000008C  E8 00000000 E	    call    WriteString
 00000091  BA 000001CA R	    mov     EDX, OFFSET userInputMsg1
 00000096  E8 00000000 E	    call    WriteString
 0000009B  E8 00000000 E	    call    CrLf
 000000A0  BA 00000205 R	    mov     EDX, OFFSET userInputMsg2
 000000A5  E8 00000000 E	    call    WriteString
 000000AA  E8 00000000 E	    call    CrLf
 000000AF  E8 00000000 E	    call    CrLf
				
 000000B4			_getInput:
				; ---------------------------------------------------------------------------
				; Displays current line number and requests user input integer.
				; Displays current line number as count + 1 so line number starts at 1 instead of 0.
				; ---------------------------------------------------------------------------
 000000B4  BA 00000249 R	    mov     EDX, OFFSET userInput
 000000B9  E8 00000000 E	    call    WriteString
 000000BE  A1 00000374 R	    mov     EAX, count
 000000C3  83 C0 01		    add     EAX, 1
 000000C6  E8 00000000 E	    call    WriteDec
 000000CB  BA 000001C5 R	    mov     EDX, OFFSET colon
 000000D0  E8 00000000 E	    call    WriteString
 000000D5  E8 00000000 E	    call    ReadInt
 000000DA  A3 0000035C R	    mov     inputNum, EAX
				
				; ----------------------------------------------------------------------------------
				; Validate inputs. If input is out or range, out-of-range message will be displayed.
				; If input is positive, program will display results, goodbye message, and end.
				; If no valid intput, program will display error message, goodbye message, and end.
				; ----------------------------------------------------------------------------------
				
				; validate input for negative integers. If positive, jmp to calculate results else exit loop
 000000DF  B8 00000000		    mov     EAX, 0              ; set EAX to 0 in order to correctly set the sign flag in next cmp instruction (inputNum - EAX) 
 000000E4  39 05 0000035C R	    cmp     inputNum, EAX
 000000EA  79 73		    jns      _exitLoop          ; jmp if sign flag = 0 (positive result)

				; validate input for lower end of first range n >= -200. If n < -200, jmp to invalidNegMsg
 000000EC  A1 0000035C R	    mov     EAX, inputNum
 000000F1  3D FFFFFF38		    cmp     EAX, LOWER_LIMIT_1
 000000F6  7C 13		    jl      _invalidNegMsg      ; jmp if input < -200 (out of bounds)
				
				; validate input for upper end of first range n <= -100. If n > -100, check if input fits within 2nd range [-50, -1]
 000000F8  83 F8 9C		    cmp     EAX, UPPER_LIMIT_1
 000000FB  7F 02		    jg      _continue           ; jmp if input > -100 (out of bounds)
 000000FD  EB 22		    jmp     _valid              
				
				; validate input for lower end of second range n >= -50. If n < -50, jmp to invalidNegMsg
 000000FF			_continue:
 000000FF  83 F8 CE		    cmp     EAX, LOWER_LIMIT_2
 00000102  7C 07		    jl      _invalidNegMsg      ; jmp if input < -50 (out of bounds)
				
				; validate input for upper end of second range n <= -1. If n > -1, jmp to invalidNegMsg
 00000104  83 F8 FF		    cmp     EAX, UPPER_LIMIT_2
 00000107  7F 02		    jg      _invalidNegMsg      ; jmp if input > -1 (out of bounds)
 00000109  EB 16		    jmp     _valid              ;

				; display invalidNegMsg
 0000010B			_invalidNegMsg:
 0000010B  E8 00000000 E	    call    CrlF
 00000110  BA 00000250 R	    mov     EDX, OFFSET invalidNeg
 00000115  E8 00000000 E	    call    WriteString
 0000011A  E8 00000000 E	    call    CrlF
 0000011F  EB 93		    jmp     _getInput           ; return back to input loop after displaying invalidNeg message
				
				; ----------------------------------------------------------------------------------------------------
				; Check input to determine if input is new max or new min.
				; If input is > min, jmp to _max and checks if input < max. If input < min, input is saved as new min.
				; If input > max, input is saved as new max.
				; After checking each input, returns back to input loop.
				; -----------------------------------------------------------------------------------------------------
				
				; add input to sum, increment count
 00000121			_valid:
 00000121  A1 0000035C R	    mov     EAX, inputNum
 00000126  01 05 00000368 R	    add     sum, EAX
 0000012C  FF 05 00000374 R	    inc     count
				
				; check if input < min, if true, update min
 00000132			_min:
 00000132  A1 0000035C R	    mov     EAX, inputNum
 00000137  3B 05 00000364 R	    cmp     EAX, min
 0000013D  7F 05		    jg      _max            ; jmp if input > min
 0000013F  A3 00000364 R	    mov     min, EAX        ; else store as new min

				; check if input > max, if true, update max
 00000144			_max:
 00000144  A1 0000035C R	    mov     EAX, inputNum
 00000149  3B 05 00000360 R	    cmp     EAX, max
 0000014F  0F 8C FFFFFF5F	    jl      _getInput       ; jmp if input < max
 00000155  A3 00000360 R	    mov     max, EAX        ; else store as new max
 0000015A  E9 FFFFFF55		    jmp     _getInput       

				; Exit from user input loop. Exits if input is positive integer
 0000015F			_exitLoop:
				; check for count = 0, meaning no valid integers entered, if count = 0 jmp to noValidNums msg
 0000015F  A1 00000374 R	    mov     EAX, count
 00000164  83 F8 00		    cmp     EAX, 0
 00000167  0F 84 00000157	    je     _noValidNums     ; jmp if count = 0
				
				; -----------------------------------------------------------------------------------------------------
				; Calculate rounded integer average with equation (((((sum * 100) / count ) + |-49|)) / 100).
				; Works by moving decimal place (sum * 100) and then adding -49 then dividing by 100 to move the decimal place back.
				; For 0.5 round down & 0.51 round up.
				; ------------------------------------------------------------------------------------------------------
				
				; calculate rounded integer average        -       (((((sum * 100) / count ) + |-49|)) / 100)
 0000016D  6B 05 00000368 R	    imul    EAX, sum, 100
	   64
 00000174  A3 0000036C R	    mov     avg, EAX
 00000179  99			    cdq                         ; sign-extened EAX into EDX for signed division
 0000017A  F7 3D 00000374 R	    idiv    count
 00000180  A3 0000036C R	    mov     avg, EAX
 00000185  83 05 0000036C R	    add     avg, -49
	   CF
 0000018C  A1 0000036C R	    mov     EAX, avg
 00000191  99			    cdq                         ; sign-extened EAX into EDX for signed division
 00000192  C7 05 00000380 R	    mov     oneHundred, 100
	   00000064
 0000019C  F7 3D 00000380 R	    idiv    oneHundred
 000001A2  A3 0000036C R	    mov     avg, EAX
				
				; -----------------------------------------------------------------------------------------------------------------------------------------
				; In order to display decimal number without floating point units, break up the non decimal part from the decimal part.
				; Then round the decimal part to nearest 0.01 and print both numbers seperated by a decimal. To the user, this appears as a decimal number.
				; ((Remainder of sum / count) * 1000) / count = decimal part of number.
				; To round decimal part (rmd) to nearest 0.01, (((rmd * 10) + |-49|) / 100) * -1) = rounded decimal part.
				; Decimal part (rmd) * -1 to get rid of "-" sign.
				; ------------------------------------------------------------------------------------------------------------------------------------------
				
				; calculate remainder of sum / count in order to get decimal part of number to display     -      rmd = intPart = sum / count  &   (rmd * 1000) / count = decimal-number decimal portion
 000001A7  A1 00000368 R	    mov     EAX, sum
 000001AC  99			    cdq                         ; sign-extened EAX into EDX for signed division
 000001AD  F7 3D 00000374 R	    idiv    count
 000001B3  89 15 00000378 R	    mov     rmd, EDX
 000001B9  A3 0000037C R	    mov     intPart, EAX                 ; store to display later as initial part of decimal number
 000001BE  69 05 00000378 R	    imul    EAX, rmd, 1000
	   000003E8
 000001C8  A3 00000378 R	    mov     rmd, EAX
 000001CD  99			    cdq                         ; sign-extened EAX into EDX for signed division
 000001CE  F7 3D 00000374 R	    idiv    count
 000001D4  A3 00000378 R	    mov     rmd, EAX
				
				; round decimal part (rmd) to the nearest 0.01
				; (((rmd * 10) + |-49|) / 100) * -1) = rounded decimal part
 000001D9  6B 05 00000378 R	    imul    EAX, rmd, 10
	   0A
 000001E0  A3 00000378 R	    mov     rmd, EAX
 000001E5  83 05 00000378 R	    add     rmd, -49                    ; + |-49| will round 0.05 down to keep the same rounding format as used with the rounded integer number. If want 0.05 to round up, change to + |-50|
	   CF
 000001EC  A1 00000378 R	    mov     EAX, rmd
 000001F1  99			    cdq                                 ; sign-extened EAX into EDX for signed division
 000001F2  F7 3D 00000380 R	    idiv    oneHundred
 000001F8  A3 00000378 R	    mov     rmd, EAX
 000001FD  6B 05 00000378 R	    imul    EAX, rmd, -1                ; multiply by -1 to get rid of '-' symbol 
	   FF
 00000204  A3 00000378 R	    mov     rmd, EAX
				
				; --------------------------------------------------------------
				; Display results max, min, avg, sum, count, and decimal-number.
				; --------------------------------------------------------------

				; display count of valid inputs 
 00000209  E8 00000000 E	    call    CrLf
 0000020E  BA 000002AB R	    mov     EDX, OFFSET resultMsg1
 00000213  E8 00000000 E	    call    WriteString
 00000218  A1 00000374 R	    mov     EAX, count
 0000021D  E8 00000000 E	    call    WriteDec
 00000222  BA 000002B8 R	    mov     EDX, OFFSET resultMsg2
 00000227  E8 00000000 E	    call    WriteString
 0000022C  E8 00000000 E	    call    CrLf
				; display sum of valid inputs
 00000231  BA 000002C7 R	    mov     EDX, OFFSET resultSum
 00000236  E8 00000000 E	    call    WriteString
 0000023B  A1 00000368 R	    mov     EAX, sum
 00000240  E8 00000000 E	    call    WriteInt
 00000245  E8 00000000 E	    call    CrLf
				; display max of valid inputs
 0000024A  BA 000002CD R	    mov     EDX, OFFSET resultMax
 0000024F  E8 00000000 E	    call    WriteString
 00000254  A1 00000360 R	    mov     EAX, max
 00000259  E8 00000000 E	    call    WriteInt
 0000025E  E8 00000000 E	    call    CrLf
				; display min of valid inputs
 00000263  BA 000002D7 R	    mov     EDX, OFFSET resultMin
 00000268  E8 00000000 E	    call    WriteString
 0000026D  A1 00000364 R	    mov     EAX, min
 00000272  E8 00000000 E	    call    WriteInt
 00000277  E8 00000000 E	    call    CrLf
				; display avg of valid inputs
 0000027C  BA 000002E1 R	    mov     EDX, OFFSET resultAvg
 00000281  E8 00000000 E	    call    WriteString
 00000286  A1 0000036C R	    mov     EAX, avg
 0000028B  E8 00000000 E	    call    WriteInt
 00000290  E8 00000000 E	    call    CrLf
				; display average in a decimal-point-number 
 00000295  BA 000002F3 R	    mov     EDX, OFFSET resultDec
 0000029A  E8 00000000 E	    call    WriteString
 0000029F  A1 0000037C R	    mov     EAX, intPart
 000002A4  E8 00000000 E	    call    WriteInt
 000002A9  BA 000001C8 R	    mov     EDX, OFFSET decimal
 000002AE  E8 00000000 E	    call    WriteString
 000002B3  A1 00000378 R	    mov     EAX, rmd
 000002B8  E8 00000000 E	    call    WriteDec
 000002BD  E8 00000000 E	    call    CrLf
 000002C2  EB 14		    jmp     _goodbyeMsg                     ; jmp to goobye message to skip displaying the noValidNums message
				
				; ---------------------------------------------------------
				; Display message if no valid numbers entered to calculate.
				; ---------------------------------------------------------
 000002C4			_noValidNums:
 000002C4  E8 00000000 E	    call    Crlf
 000002C9  BA 00000289 R	    mov     EDX, OFFSET noValidNums
 000002CE  E8 00000000 E	    call    WriteString
 000002D3  E8 00000000 E	    call    Crlf
				
				; --------------------------------------------
				; Display goodbye msg and prints the username.
				; --------------------------------------------
 000002D8			_goodbyeMsg:
 000002D8  E8 00000000 E	    call    CrLf
 000002DD  BA 00000304 R	    mov     EDX, OFFSET goodbyeMsg
 000002E2  E8 00000000 E	    call    WriteString
 000002E7  BA 00000348 R	    mov     EDX, OFFSET userName
 000002EC  E8 00000000 E	    call    WriteString
 000002F1  BA 000001C2 R	    mov     EDX, OFFSET explPnt
 000002F6  E8 00000000 E	    call    WriteString
 000002FB  E8 00000000 E	    call    CrLf

					Invoke ExitProcess,0	; exit to operating system
 00000300  6A 00	   *	    push   +000000000h
 00000302  E8 00000000 E   *	    call   ExitProcess
 00000307			main ENDP

				END main
Microsoft (R) Macro Assembler Version 14.39.33523.0	    04/26/24 11:25:23
;A More Advanced Arithmetic Program     (Proj3_greenede.asm  Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000388 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000307 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000307 Public STDCALL
  _getInput  . . . . . . . . . .	L Near	 000000B4 _TEXT	
  _continue  . . . . . . . . . .	L Near	 000000FF _TEXT	
  _invalidNegMsg . . . . . . . .	L Near	 0000010B _TEXT	
  _valid . . . . . . . . . . . .	L Near	 00000121 _TEXT	
  _min . . . . . . . . . . . . .	L Near	 00000132 _TEXT	
  _max . . . . . . . . . . . . .	L Near	 00000144 _TEXT	
  _exitLoop  . . . . . . . . . .	L Near	 0000015F _TEXT	
  _noValidNums . . . . . . . . .	L Near	 000002C4 _TEXT	
  _goodbyeMsg  . . . . . . . . .	L Near	 000002D8 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
LOWER_LIMIT_1  . . . . . . . . .	Number	 -000000C8h   
LOWER_LIMIT_2  . . . . . . . . .	Number	 -00000032h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
UPPER_LIMIT_1  . . . . . . . . .	Number	 -00000064h   
UPPER_LIMIT_2  . . . . . . . . .	Number	 -00000001h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
avg2 . . . . . . . . . . . . . .	DWord	 00000370 _DATA	
avg  . . . . . . . . . . . . . .	DWord	 0000036C _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
colon  . . . . . . . . . . . . .	Byte	 000001C5 _DATA	
count  . . . . . . . . . . . . .	DWord	 00000374 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
decimalPart  . . . . . . . . . .	DWord	 00000384 _DATA	
decimal  . . . . . . . . . . . .	Byte	 000001C8 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
explPnt  . . . . . . . . . . . .	Byte	 000001C2 _DATA	
extraCredit1 . . . . . . . . . .	Byte	 00000037 _DATA	
extraCredit2 . . . . . . . . . .	Byte	 00000094 _DATA	
getUserName  . . . . . . . . . .	Byte	 000001A1 _DATA	
goodbyeMsg . . . . . . . . . . .	Byte	 00000304 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
greetUser  . . . . . . . . . . .	Byte	 000001BA _DATA	
inputNum . . . . . . . . . . . .	DWord	 0000035C _DATA	
instruct1  . . . . . . . . . . .	Byte	 000000ED _DATA	
instruct2  . . . . . . . . . . .	Byte	 0000013F _DATA	
intPart  . . . . . . . . . . . .	DWord	 0000037C _DATA	
invalidNeg . . . . . . . . . . .	Byte	 00000250 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
max  . . . . . . . . . . . . . .	DWord	 00000360 _DATA	
min  . . . . . . . . . . . . . .	DWord	 00000364 _DATA	
noValidNums  . . . . . . . . . .	Byte	 00000289 _DATA	
oneHundred . . . . . . . . . . .	DWord	 00000380 _DATA	
programTitle . . . . . . . . . .	Byte	 00000000 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
resultAvg  . . . . . . . . . . .	Byte	 000002E1 _DATA	
resultDec  . . . . . . . . . . .	Byte	 000002F3 _DATA	
resultMax  . . . . . . . . . . .	Byte	 000002CD _DATA	
resultMin  . . . . . . . . . . .	Byte	 000002D7 _DATA	
resultMsg1 . . . . . . . . . . .	Byte	 000002AB _DATA	
resultMsg2 . . . . . . . . . . .	Byte	 000002B8 _DATA	
resultSum  . . . . . . . . . . .	Byte	 000002C7 _DATA	
rmd  . . . . . . . . . . . . . .	DWord	 00000378 _DATA	
sum  . . . . . . . . . . . . . .	DWord	 00000368 _DATA	
userInputMsg1  . . . . . . . . .	Byte	 000001CA _DATA	
userInputMsg2  . . . . . . . . .	Byte	 00000205 _DATA	
userInput  . . . . . . . . . . .	Byte	 00000249 _DATA	
userNameBytes  . . . . . . . . .	DWord	 00000344 _DATA	
userName . . . . . . . . . . . .	Byte	 00000348 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
